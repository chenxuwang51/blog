{
    "version": "https://jsonfeed.org/version/1",
    "title": "王晨旭的技术博客",
    "description": "",
    "home_page_url": "https://github.com/chenxuwang51/blog",
    "items": [
        {
            "id": "https://github.com/chenxuwang51/blog/2021/03/30/git%E5%88%86%E6%94%AF/",
            "url": "https://github.com/chenxuwang51/blog/2021/03/30/git%E5%88%86%E6%94%AF/",
            "title": "git分支",
            "date_published": "2021-03-30T12:10:06.000Z",
            "content_html": "<!---->\n<span id=\"more\"></span>\n<ul>\n<li><strong>首先在 gitee.com 创建一个新的仓库，在选择分支类型时选支持 master/develop 类型分支</strong></li>\n<li>新建一个 Django 项目 git init 初始化</li>\n<li>素质三连提交至刚才新建的 git 仓库中，注意第一次上传需要建立远程关系：git remote add origin <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vJUU4JUI3JUFGJUU1JUJFJTg0JUU1JTkwJThELyVFNCVCQiU5MyVFNSVCQSU5MyVFNSU5MCU4RC5naXQ=\">https://gitee.com/ 路径名 / 仓库名.git</span></li>\n</ul>\n<p>上传成功后，去仓库查看分支，可以看到默认的分支是 master，点击新建分支，新建一个开发分支 develop</p>\n<p>在项目地址打开命名行</p>\n<ul>\n<li>\n<p>查看所有分支，* 号指示当前所在的分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看云端分支 (remotes)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>切换分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout develop</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>合并分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/03/29/%E6%9C%88%E6%9C%AB%E6%80%BB%E7%BB%93/",
            "url": "https://github.com/chenxuwang51/blog/2021/03/29/%E6%9C%88%E6%9C%AB%E6%80%BB%E7%BB%93/",
            "title": "月末总结",
            "date_published": "2021-03-29T02:10:15.000Z",
            "content_html": "<!---->\n<span id=\"more\"></span>\n<h2 id=\"本月的学习已经接近尾声总结一下本月的知识点\"><a class=\"markdownIt-Anchor\" href=\"#本月的学习已经接近尾声总结一下本月的知识点\">#</a> 本月的学习已经接近尾声，总结一下本月的知识点</h2>\n<h3 id=\"day-1\"><a class=\"markdownIt-Anchor\" href=\"#day-1\">#</a> day 1</h3>\n<ul>\n<li>Ant Design of Vue 博客：https://w_dadaoxian.gitee.io/ku_hexo/2021/03/01/Vue/#more</li>\n</ul>\n<h3 id=\"day-2\"><a class=\"markdownIt-Anchor\" href=\"#day-2\">#</a> day  2</h3>\n<ul>\n<li>\n<p>docker 基本使用参考博客:https://w_dadaoxian.gitee.io/ku_hexo/2021/03/03/docker% E5% B8% B8% E7%94% A8% E5%91% BD% E4% BB% A4/#more</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Docker是一个开源的应用容器引擎,可以让开发者打包他们的应用以及依赖包到一个可移植性的镜像中</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-3\"><a class=\"markdownIt-Anchor\" href=\"#day-3\">#</a> day 3</h3>\n<ul>\n<li>\n<p>redis 生命周期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对key的其他操作</span><br><span class=\"line\">给key的值设置过期时间</span><br><span class=\"line\">expire key 秒</span><br><span class=\"line\">pexpire key 毫秒</span><br><span class=\"line\">ttl key 以秒为单位 返回key还剩余多次时间</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Redis 连接池</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 链接池 --- 节约了建立链接和关闭链接的操作(可以帮助我们提高效率)</span></span><br><span class=\"line\">pool = redis.ConnectionPool()</span><br><span class=\"line\"><span class=\"comment\"># 从链接池获取链接</span></span><br><span class=\"line\">conn = redis.Redis(connection_pool=pool)</span><br><span class=\"line\">conn.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;test1&quot;</span>, <span class=\"string\">&quot;test1&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(conn.get(<span class=\"string\">&quot;test1&quot;</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-4\"><a class=\"markdownIt-Anchor\" href=\"#day-4\">#</a> day 4</h3>\n<ul>\n<li>\n<p>异步</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 异步使用 async 关键字</span></span><br><span class=\"line\"><span class=\"comment\"># 当方法前面加上了 async 那么就变为了一个异步方法</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">with</span> httpx.AsyncClient() <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">\t\t<span class=\"comment\"># 在异步方法内部所有的耗时操作(调用别的方法或调别的外部的方法)都必须加上 await(不需要等待,主动给你返回结果) 当有await存在时那么就绝对存在async</span></span><br><span class=\"line\">\t\tr = <span class=\"keyword\">await</span> client.get(url,params=data)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(r.json())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> httpx.AsyncClient() <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">        <span class=\"comment\"># 建立任务列表</span></span><br><span class=\"line\">        task_list = []</span><br><span class=\"line\">        <span class=\"comment\"># 写个循环 (类似于修跑道)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        \t<span class=\"comment\"># 将你要异步执行的东西塞到这里列表里面</span></span><br><span class=\"line\">            req = request(client)</span><br><span class=\"line\">            task = asyncio.create_task(req)</span><br><span class=\"line\">            task_list.append(task)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.gether(*task_list)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-5\"><a class=\"markdownIt-Anchor\" href=\"#day-5\">#</a> day 5</h3>\n<ul>\n<li>\n<p>翻墙软件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMYNetWork红莓网络：https:&#x2F;&#x2F;cmy.network&#x2F;index</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-6\"><a class=\"markdownIt-Anchor\" href=\"#day-6\">#</a> day 6</h3>\n<ul>\n<li>\n<p>队列</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueue</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.li = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self, x: <span class=\"built_in\">tuple</span></span>) -&gt; <span class=\"literal\">None</span>:</span></span><br><span class=\"line\">        self.li.append(x)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">tuple</span>:</span></span><br><span class=\"line\">        self.li = <span class=\"built_in\">sorted</span>(self.li, key=<span class=\"keyword\">lambda</span> k: k[<span class=\"number\">2</span>], reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.li.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">bool</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> <span class=\"built_in\">bool</span>(self.li)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.li</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">q = MyQueue()</span><br><span class=\"line\">q.push((<span class=\"number\">1</span>, <span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">q.push((<span class=\"number\">5</span>, <span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(q.pop())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(q.get())</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-7\"><a class=\"markdownIt-Anchor\" href=\"#day-7\">#</a> day 7</h3>\n<ul>\n<li>\n<p>多线程异步消费</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 异步消费</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_job</span>():</span></span><br><span class=\"line\">    r = RedisQueue(<span class=\"string\">&quot;redisqueue&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        result = r.pop()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> result:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动多线程</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    thread = threading.Thread(target=do_job)  <span class=\"comment\"># target调用方法名不加括号，带括号的是调用该方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    thread.start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 线程池的使用,max_workers定义池中线程数量</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> ThreadPoolExecutor(max_workers=<span class=\"number\">5</span>) <span class=\"keyword\">as</span> t:</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    [t.submit(do_job) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>)]</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;线程池耗时：<span class=\"subst\">&#123;end-start&#125;</span>秒&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\">res = loop.run_until_complete(do_job())</span><br><span class=\"line\">loop.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-8\"><a class=\"markdownIt-Anchor\" href=\"#day-8\">#</a> day 8</h3>\n<ul>\n<li>\n<p>acl 用户权限模型</p>\n<p><img data-src=\"F:%5C%E5%AD%A6%E4%B9%A0%5Cpractical_training%5C%E6%88%AA%E5%9B%BE%5Cacl.png\" alt=\"\"></p>\n</li>\n<li>\n<p>abac 用户权限模型</p>\n<p><img data-src=\"F:%5C%E5%AD%A6%E4%B9%A0%5Cpractical_training%5C%E6%88%AA%E5%9B%BE%5Cabac.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"day-9\"><a class=\"markdownIt-Anchor\" href=\"#day-9\">#</a> day 9</h3>\n<ul>\n<li>\n<p>钉钉三方登录</p>\n<p><img data-src=\"F:%5C%E5%AD%A6%E4%B9%A0%5Cpractical_training%5C%E6%88%AA%E5%9B%BE%5C%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B.png\" alt=\"\"></p>\n</li>\n<li>\n<p>位运算的使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">位语运算(判断偶):要判断的数据 &amp; 1 如果返回值为0则为偶数,反之则为奇数</span><br><span class=\"line\">位语运算是直接对整数在内存中的二进制位进行操作,所以其使用效率特别的高效</span><br><span class=\"line\">十进制转换二进制: bin(十进制数据)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-11\"><a class=\"markdownIt-Anchor\" href=\"#day-11\">#</a> day 11</h3>\n<ul>\n<li>\n<p>动态表单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用MongoDB存储标签类型，返回给前端vue表单判断是什么类型，然后标签动态绑定类型</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>工单分类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一个工单分类表，字段需包含主键id，分类名称name，自关联id</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-12\"><a class=\"markdownIt-Anchor\" href=\"#day-12\">#</a> day 12</h3>\n<ul>\n<li>\n<p>MongoDB，基本使用参考微博：https://w_dadaoxian.gitee.io/ku_hexo/2021/03/21/MongoDB% E5%9F% BA% E7% A1%80% E5%91% BD% E4% BB% A4/#more</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoDB是一个基于分布式文件存储的数据库,由C++语言编写而成,旨在为Web应用提供可扩展的高性能数据库存储解决方案</span><br><span class=\"line\">MongoDB是一个高性能、易部署、易使用，存储数据非常方便的数据库</span><br><span class=\"line\">MongoDB和Redis一样都是NOSql类型数据库</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-13\"><a class=\"markdownIt-Anchor\" href=\"#day-13\">#</a> day 13</h3>\n<ul>\n<li>\n<p>工单审批流程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户在提交工单后，工单默认进入待审状态，开时审批后是审批中状态，完成后是审批结束</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuditWorkOrder</span>(<span class=\"params\">APIView</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        wid = request.data.get(<span class=\"string\">&#x27;wid&#x27;</span>)  <span class=\"comment\"># 当前审核的工单id</span></span><br><span class=\"line\">        work_order = WorkOrder.objects.get(<span class=\"built_in\">id</span>=wid)  <span class=\"comment\"># 获取审核工单的信息</span></span><br><span class=\"line\">        present_uid = <span class=\"built_in\">int</span>(request.data.get(<span class=\"string\">&quot;present_uid&quot;</span>))  <span class=\"comment\"># 当前登录的用户id</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(present_uid, <span class=\"string\">&quot;---now---&quot;</span>)</span><br><span class=\"line\">        this_auditor_list = <span class=\"built_in\">eval</span>(work_order.auditor_list)  <span class=\"comment\"># 审核者列表</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(this_auditor_list, <span class=\"string\">&quot;auditor列表 类型为元祖&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        one_auditor = work_order.auditor_id  <span class=\"comment\"># 第一审核人的id</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(one_auditor, <span class=\"string\">&quot;---one---&quot;</span>)</span><br><span class=\"line\">        this_a_index = this_auditor_list.index(one_auditor)</span><br><span class=\"line\">        next_a_index = this_a_index + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> present_uid <span class=\"keyword\">in</span> this_auditor_list:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> present_uid == one_auditor <span class=\"keyword\">and</span> one_auditor == this_auditor_list[-<span class=\"number\">1</span>]:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> one_auditor == this_auditor_list[-<span class=\"number\">1</span>]:</span><br><span class=\"line\">                        WorkOrder.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=wid).update(auditor_id=this_auditor_list[<span class=\"number\">0</span>], status=<span class=\"number\">3</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;当前审核完成&quot;</span>, <span class=\"string\">&quot;status&quot;</span>: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        WorkOrder.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=wid).update(auditor_id=this_auditor_list[next_a_index], status=<span class=\"number\">3</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;当前审核完成&quot;</span>, <span class=\"string\">&quot;status&quot;</span>: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    WorkOrder.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=wid).update(auditor_id=this_auditor_list[this_a_index], status=<span class=\"number\">3</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;审核完成&quot;</span>, <span class=\"string\">&quot;status&quot;</span>: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">                WorkOrder.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=wid).update(auditor_id=<span class=\"literal\">None</span>, status=<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;已通过该工单业务&quot;</span>, <span class=\"string\">&quot;status&quot;</span>: <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;您无需审核该工单&quot;</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"number\">400</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        wid = request.data.get(<span class=\"string\">&quot;wid&quot;</span>)</span><br><span class=\"line\">        work_order = WorkOrder.objects.get(<span class=\"built_in\">id</span>=wid)  <span class=\"comment\"># 获取审核工单的信息</span></span><br><span class=\"line\">        present_uid = <span class=\"built_in\">int</span>(request.data.get(<span class=\"string\">&quot;present_uid&quot;</span>))  <span class=\"comment\"># 当前登录的用户id</span></span><br><span class=\"line\">        this_auditor_list = <span class=\"built_in\">eval</span>(work_order.auditor_list)  <span class=\"comment\"># 审核者列表</span></span><br><span class=\"line\">        refuse_reason = request.data.get(<span class=\"string\">&quot;refuse_reason&quot;</span>)  <span class=\"comment\"># 拒绝理由</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> present_uid <span class=\"keyword\">in</span> this_auditor_list:</span><br><span class=\"line\">            this_a_index = this_auditor_list.index(present_uid)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> this_auditor_list[this_a_index] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                WorkOrder.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=wid).update(auditor_id=<span class=\"literal\">None</span>, status=<span class=\"number\">2</span>, refuse_reason=refuse_reason)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;已拒绝该审核&quot;</span>, <span class=\"string\">&quot;status&quot;</span>: <span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                last_a_index = this_a_index - <span class=\"number\">1</span></span><br><span class=\"line\">                WorkOrder.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=wid).update(auditor_id=this_auditor_list[last_a_index], status=<span class=\"number\">2</span>,</span><br><span class=\"line\">                                                        refuse_reason=refuse_reason)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;已拒绝该审核&quot;</span>, <span class=\"string\">&quot;status&quot;</span>: <span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;您无需审核该工单&quot;</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"number\">400</span>&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-14\"><a class=\"markdownIt-Anchor\" href=\"#day-14\">#</a> day 14</h3>\n<ul>\n<li>\n<p>栈的使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 栈</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.items = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 判断是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.items == []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 入栈</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self, item</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.items.append(item)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 出栈</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.items.pop()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-15\"><a class=\"markdownIt-Anchor\" href=\"#day-15\">#</a> day 15</h3>\n<ul>\n<li>\n<p>工厂设计模式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dingding</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 钉钉登录类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;钉钉登录&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">geturl</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GitEe</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 码云登录类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;码云登录&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 工厂类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleFactory</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">product_login</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name == <span class=\"string\">&quot;dingding&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Dingding()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> name == <span class=\"string\">&quot;gitee&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> GitEe()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">demo1 = SimpleFactory.product_login(<span class=\"string\">&#x27;dingding&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(demo1.geturl())</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-16\"><a class=\"markdownIt-Anchor\" href=\"#day-16\">#</a> day 16</h3>\n<ul>\n<li>\n<p>消息状态，状态分为已读和未读，顺序则按照发布时间排倒序.</p>\n</li>\n<li>\n<p>&quot;status&quot; 为消息的状态</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 消息展示接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessagesShowView</span>(<span class=\"params\">APIView</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        mes_list = Messages.objects.order_by(<span class=\"string\">&quot;status&quot;</span>, <span class=\"string\">&quot;-created_time&quot;</span>)</span><br><span class=\"line\">        mes_ser = MessagesSer(mes_list, many=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;ok&quot;</span>, <span class=\"string\">&quot;data&quot;</span>: mes_ser.data&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-17\"><a class=\"markdownIt-Anchor\" href=\"#day-17\">#</a> day 17</h3>\n<ul>\n<li>\n<p>mongo 延时索引的使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TTL索引是mongodb新支持的用于延时自动删除记录的一种索引。它仅包含一个字段，该字段值需要是Date()类型，并且不支持复合索引。可以指定某条记录在延时固定时间后自动删除。数据自动超时删除主要用在系统生成的事件、日志或者会话信息等不需要永久存储的数据。</span><br><span class=\"line\"></span><br><span class=\"line\">1. 创建索引</span><br><span class=\"line\"></span><br><span class=\"line\">mongos&gt; db.eventlog.createIndex( &#123; &quot;lastModifiedDate&quot;: 1 &#125;, &#123; expireAfterSeconds: 60 &#125; )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;ok&quot; : 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2. 插入4条记录</span><br><span class=\"line\">mongos&gt; db.eventlog.insert(&#123;&quot;title&quot;:&quot;mongodb 1&quot;,&quot;lastModifiedDate&quot;:new Date()&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">mongos&gt; db.eventlog.insert(&#123;&quot;title&quot;:&quot;mongodb 2&quot;,&quot;lastModifiedDate&quot;:new Date()&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">mongos&gt; db.eventlog.insert(&#123;&quot;title&quot;:&quot;mongodb 3&quot;,&quot;lastModifiedDate&quot;:new Date()&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">mongos&gt; db.eventlog.insert(&#123;&quot;title&quot;:&quot;mongodb 4&quot;,&quot;lastModifiedDate&quot;:new Date()&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">3. 查询记录</span><br><span class=\"line\"></span><br><span class=\"line\">mongos&gt; db.eventlog.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5a9697a671d2645a6fa3f9cb&quot;), &quot;title&quot; : &quot;mongodb 1&quot;, &quot;lastModifiedDate&quot; : ISODate(&quot;2018-02-28T11:51:02.804Z&quot;) &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5a9697aa71d2645a6fa3f9cc&quot;), &quot;title&quot; : &quot;mongodb 2&quot;, &quot;lastModifiedDate&quot; : ISODate(&quot;2018-02-28T11:51:06.393Z&quot;) &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5a9697ad71d2645a6fa3f9cd&quot;), &quot;title&quot; : &quot;mongodb 3&quot;, &quot;lastModifiedDate&quot; : ISODate(&quot;2018-02-28T11:51:09.416Z&quot;) &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5a9697c671d2645a6fa3f9ce&quot;), &quot;title&quot; : &quot;mongodb 4&quot;, &quot;lastModifiedDate&quot; : ISODate(&quot;2018-02-28T11:51:34.499Z&quot;) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">大概过了90s，再查询</span><br><span class=\"line\">mongos&gt; db.eventlog.find()</span><br><span class=\"line\">mongos&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">果然同时消失了，说明执行超时删除不是实时的</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-18\"><a class=\"markdownIt-Anchor\" href=\"#day-18\">#</a> day 18</h3>\n<ul>\n<li>\n<p>websocket</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebSocket是一种在单个TCP连接上进行全双工通信的协议。WebSocket通信协议于2011年被IETF定为标准RFC 6455，并由RFC7936补充规范。WebSocket API也被W3C定为标准。</span><br><span class=\"line\">WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</span><br><span class=\"line\"></span><br><span class=\"line\">很多网站为了实现推送技术，所用的技术都是轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</span><br><span class=\"line\">而比较新的技术去做轮询的效果是Comet。这种技术虽然可以双向通信，但依然需要反复发出请求。而且在Comet中，普遍采用的长链接，也会消耗服务器资源。</span><br><span class=\"line\">在这种情况下，HTML5定义了WebSocket协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</span><br><span class=\"line\"></span><br><span class=\"line\">应用场景：</span><br><span class=\"line\">在工单项目中，使用websocket实现聊天功能，在页面实时展示聊天消息和聊天记录</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"day-19\"><a class=\"markdownIt-Anchor\" href=\"#day-19\">#</a> day 19</h3>\n<ul>\n<li>\n<p>聊天存储方案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在聊天过程中使用MongoDB存储聊天数据，需要存入主键id，消息发送者的用户id，消息接收者的用户id，消息内容。</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Win10 环境下使用 Docker 容器式部署前后端分离项目 Django+Vue.js</p>\n<p>攻略：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92M3UuY24vYV9pZF8xNzk=\">https://v3u.cn/a_id_179</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92M3UuY24vYV9pZF8xNjU=\">https://v3u.cn/a_id_165</span></p>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/03/21/MongoDB%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/",
            "url": "https://github.com/chenxuwang51/blog/2021/03/21/MongoDB%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/",
            "title": "MongoDB基础命令",
            "date_published": "2021-03-21T12:32:44.000Z",
            "content_html": "<!---->\n<span id=\"more\"></span>\n<p><strong>MongoDB 官网</strong> ：  <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9uZ29kYi5jb20v\">https://www.mongodb.com/</span></p>\n<p>前往官网下载并安装 mongodb</p>\n<ul>\n<li>\n<h2 id=\"启动mongo服务\"><a class=\"markdownIt-Anchor\" href=\"#启动mongo服务\">#</a> 启动 mongo 服务</h2>\n</li>\n<li>\n<p>运行脚本 <code>./mongod</code>  可以通过 <code>-dbpath</code>  来指定数据库路径</p>\n</li>\n</ul>\n<p><img data-src=\"F:%5C%E5%AD%A6%E4%B9%A0%5Cpractical_training%5C%E6%88%AA%E5%9B%BE%5Cm1.png\" alt=\"\"></p>\n<p>从日志上可以看到 mongo 服务的默认配置信息，还可一看到每一个连接到 mongo 服务的客户端的信息，已经客户端操作信息</p>\n<ul>\n<li>\n<h2 id=\"连接mongo服务\"><a class=\"markdownIt-Anchor\" href=\"#连接mongo服务\">#</a> 连接 mongo 服务</h2>\n<p>运行脚本./mongo</p>\n<p><img data-src=\"F:%5C%E5%AD%A6%E4%B9%A0%5Cpractical_training%5C%E6%88%AA%E5%9B%BE%5Cm2.png\" alt=\"\"></p>\n</li>\n<li>\n<h2 id=\"mongodb命令\"><a class=\"markdownIt-Anchor\" href=\"#mongodb命令\">#</a> MongoDB 命令</h2>\n</li>\n<li>\n<p>创建数据库，执行命令 <code>use db_name</code> , 如果 db_name 不存在、则创建一个数据库，存在则直接连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use db_name</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看所有数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show dbs</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看当前所在数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>删除当前数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dropDatabase()</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建数据集，name：数据集参数；options：为可选项，如下表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createCollection(&quot;name&quot;, [options])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">字段\t类型\t描述</span><br><span class=\"line\">capped\t布尔\t如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。当该值为 true 时，必须指定 size 参数。</span><br><span class=\"line\">size\t数值\t为固定集合指定一个最大值（以字节计）。如果 capped 为 true，也需要指定该字段。</span><br><span class=\"line\">max\t数值\t指定固定集合中包含文档的最大数量</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看所有数据集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show collections</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>数据集插入数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.集合名.insert(&lt;document&gt;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>数据集查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.集合名.find([query])  基础查询</span><br><span class=\"line\">db.&lt;name&gt;.find([query]).pretty()  格式化查询结果</span><br><span class=\"line\">db.&lt;name&gt;.find([query]).limit(&lt;number&gt;)  限制查询结果条数</span><br><span class=\"line\">db.&lt;name&gt;.find([query]).skip(&lt;number&gt;)   跳过查询结果条数</span><br><span class=\"line\">db.&lt;name&gt;.find([query]).sort(&#123;&lt;key&gt;:&lt;value&gt;)  对查询结果按排序，value为1对key升序、为-1对key降序</span><br><span class=\"line\">pretty、limit、skip、sort可以一起使用，执行顺序为skip-&gt;limit-&gt;sort-&gt;pretty</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>删除数据集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.集合名.drop()</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>更新数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.updateOne(&lt;query&gt;, &lt;update&gt;, &lt;options&gt;)</span><br><span class=\"line\">db.collection.updateMany(&lt;query&gt;, &lt;update&gt;, &lt;options&gt;)</span><br><span class=\"line\">db.collection.replaceOne(&lt;query&gt;, &lt;replacement&gt;, &lt;options&gt;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/03/18/%E4%B8%83%E7%89%9B%E4%BA%91%E4%B8%8A%E4%BC%A0/",
            "url": "https://github.com/chenxuwang51/blog/2021/03/18/%E4%B8%83%E7%89%9B%E4%BA%91%E4%B8%8A%E4%BC%A0/",
            "title": "七牛云上传",
            "date_published": "2021-03-18T13:41:56.000Z",
            "content_html": "<!---->\n<span id=\"more\"></span>\n<ul>\n<li>\n<p>使用七牛云上传文件，首先登录七牛云，进入个人中心拿到 AccessKey 和 SecretKey，注意：新用户需要先注册七牛云。</p>\n</li>\n<li>\n<p>创建一个存储空间，并记录域名<img data-src=\"F:%5C%E5%AD%A6%E4%B9%A0%5Cpractical_training%5C%E6%88%AA%E5%9B%BE%5Csnipaste20210318_214756.png\" alt=\"\"></p>\n</li>\n<li>\n<p>django 需要写一个接口来接受七牛云返回给我们的 token, 前提是先安装上七牛云的三方包，该接口在创建完成后可以测试查看是否能湖区到七牛云的 token 信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 七牛云token</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> qiniu <span class=\"keyword\">import</span> Auth</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiNiu</span>(<span class=\"params\">APIView</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        q = Auth(<span class=\"string\">&#x27;iG6sF5yE9V6LFwRZIPJ5sM6cWW3upbZT_7obaXAt&#x27;</span>, <span class=\"string\">&#x27;LyrAaxGmYcPiAKeR5xIVp8LokyS_pw5W9ENjMoyk&#x27;</span>)</span><br><span class=\"line\">        token = q.upload_token(<span class=\"string\">&#x27;redinnovation&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(token)</span><br><span class=\"line\">        res = &#123;&#125;</span><br><span class=\"line\">        res[<span class=\"string\">&#x27;uptoken&#x27;</span>] = token</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(res)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>然后在 vue 中连接 Django 的端口，使用 token，结合前端空间完成文件上传</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">get_token</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.axios.get(<span class=\"string\">&#x27;http://localhost:8000/uptoken/&#x27;</span>).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.uptoken = result.data.uptoken;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/03/03/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "url": "https://github.com/chenxuwang51/blog/2021/03/03/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "title": "docker常用命令",
            "date_published": "2021-03-03T01:54:39.000Z",
            "content_html": "<!-- -->\n<span id=\"more\"></span>\n<p>Docker 三大核心: <strong>容器，镜像，仓库</strong></p>\n<p>容器依赖于镜像，仓库类似于 (上传到百度云，git 等)</p>\n<ul>\n<li>\n<p>显示 Docker 系统信息，包括镜像和容器数</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>查看本地已拥有的镜像</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>拉取所需要的镜像</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis(镜像名称)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>将 images 中所显示的镜像下载到本地文件夹</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o <span class=\"string\">&#x27;c:/tmp/redis.tar&#x27;</span> redis</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>将本地的镜像下载到 Docker</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i <span class=\"string\">&#x27;c:/tmp/redis.tar&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>根据 docker images 中所显示的 IMAGE ID 删除镜像</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f 镜像ID</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>显示正在运行中的容器</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>显示所有容器</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>结束正在运行中的容器</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop 容器ID</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>根据容器 ID 运行对应容器</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start 容器ID</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>根据容器 ID 删除对应的容器，容器 ID 是 docker ps 中的 CONTAINER ID</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm 容器ID</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>获取本机所分配的 IP（如果使用的是 dockerdesktop，连接时则使用本机 IP 地址 127.0.0.1）</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine ip default</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>运行指定的容器 (redis)  6380:6379 (指定端口号，如本机已经安装有 Redis，错开默认的端口)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 6380:6379 redis</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>连接已启动容器的 redis</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span> -p <span class=\"number\">6380</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/03/01/Vue/",
            "url": "https://github.com/chenxuwang51/blog/2021/03/01/Vue/",
            "title": "Ant Design of Vue",
            "date_published": "2021-03-01T12:04:17.000Z",
            "content_html": "<!---->\n<span id=\"more\"></span>\n<p>Ant Design of Vue 官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW50ZHYuY29tL2RvY3MvdnVlL2ludHJvZHVjZS1jbi8=\">https://www.antdv.com/docs/vue/introduce-cn/</span></p>\n<p>特性</p>\n<ul>\n<li>提炼自企业级中后台产品的交互语言和视觉风格。</li>\n<li>开箱即用的高质量 Vue 组件。</li>\n<li>共享 Ant Design of React 设计工具体系。</li>\n</ul>\n<p>下载组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i --save ant-design-vue</span><br></pre></td></tr></table></figure>\n<p>全局引入组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Antd <span class=\"keyword\">from</span> <span class=\"string\">&#x27;ant-design-vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;ant-design-vue/dist/antd.css&#x27;</span>;</span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Antd);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  components: &#123; App &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">&#x27;&lt;App/&gt;&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>部分组件</p>\n<p><strong>Button 按钮</strong></p>\n<p>按钮有五种类型：主按钮、次按钮、虚线按钮、危险按钮和链接按钮。主按钮在同一个操作区域最多出现一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;a-button type=<span class=\"string\">&quot;primary&quot;</span>&gt;</span><br><span class=\"line\">      Primary</span><br><span class=\"line\">    &lt;/a-button&gt;</span><br><span class=\"line\">    &lt;a-button&gt;Default&lt;/a-button&gt;</span><br><span class=\"line\">    &lt;a-button type=<span class=\"string\">&quot;dashed&quot;</span>&gt;</span><br><span class=\"line\">      Dashed</span><br><span class=\"line\">    &lt;/a-button&gt;</span><br><span class=\"line\">    &lt;a-button type=<span class=\"string\">&quot;danger&quot;</span>&gt;</span><br><span class=\"line\">      Danger</span><br><span class=\"line\">    &lt;/a-button&gt;</span><br><span class=\"line\">    &lt;a-config-provider :auto-insert-space-<span class=\"keyword\">in</span>-button=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">      &lt;a-button type=<span class=\"string\">&quot;primary&quot;</span>&gt;</span><br><span class=\"line\">        按钮</span><br><span class=\"line\">      &lt;/a-button&gt;</span><br><span class=\"line\">    &lt;/a-config-provider&gt;</span><br><span class=\"line\">    &lt;a-button type=<span class=\"string\">&quot;primary&quot;</span>&gt;</span><br><span class=\"line\">      按钮</span><br><span class=\"line\">    &lt;/a-button&gt;</span><br><span class=\"line\">    &lt;a-button type=<span class=\"string\">&quot;link&quot;</span>&gt;</span><br><span class=\"line\">      Link</span><br><span class=\"line\">    &lt;/a-button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>下拉菜单</strong></p>\n<p>向下弹出的列表。</p>\n<p>使用场景：当页面上的操作命令过多时，用此组件可以收纳操作元素。点击或移入触点，会出现一个下拉菜单。可在列表中进行选择，并执行相应的命令。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;a-dropdown&gt;</span><br><span class=\"line\">    &lt;a <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;ant-dropdown-link&quot;</span> @click=<span class=\"string\">&quot;e =&gt; e.preventDefault()&quot;</span>&gt;</span><br><span class=\"line\">      Hover me &lt;a-icon type=<span class=\"string\">&quot;down&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/a&gt;</span><br><span class=\"line\">    &lt;a-menu slot=<span class=\"string\">&quot;overlay&quot;</span>&gt;</span><br><span class=\"line\">      &lt;a-menu-item&gt;</span><br><span class=\"line\">        &lt;a href=<span class=\"string\">&quot;javascript:;&quot;</span>&gt;1st menu item&lt;/a&gt;</span><br><span class=\"line\">      &lt;/a-menu-item&gt;</span><br><span class=\"line\">      &lt;a-menu-item&gt;</span><br><span class=\"line\">        &lt;a href=<span class=\"string\">&quot;javascript:;&quot;</span>&gt;2nd menu item&lt;/a&gt;</span><br><span class=\"line\">      &lt;/a-menu-item&gt;</span><br><span class=\"line\">      &lt;a-menu-item&gt;</span><br><span class=\"line\">        &lt;a href=<span class=\"string\">&quot;javascript:;&quot;</span>&gt;3rd menu item&lt;/a&gt;</span><br><span class=\"line\">      &lt;/a-menu-item&gt;</span><br><span class=\"line\">    &lt;/a-menu&gt;</span><br><span class=\"line\">  &lt;/a-dropdown&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>Pagination 分页</strong></p>\n<p>采用分页的形式分隔长列表，每次只加载一个页面。</p>\n<p>使用场景：</p>\n<ul>\n<li>当加载 / 渲染所有数据将花费很多时间时；</li>\n<li>可切换页码浏览数据。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;a-pagination show-quick-jumper :<span class=\"keyword\">default</span>-current=<span class=\"string\">&quot;2&quot;</span> :total=<span class=\"string\">&quot;500&quot;</span> @change=<span class=\"string\">&quot;onChange&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;br /&gt;</span><br><span class=\"line\">    &lt;a-pagination</span><br><span class=\"line\">      show-quick-jumper</span><br><span class=\"line\">      :<span class=\"keyword\">default</span>-current=<span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">      :total=<span class=\"string\">&quot;500&quot;</span></span><br><span class=\"line\">      disabled</span><br><span class=\"line\">      show-less-items</span><br><span class=\"line\">      @change=<span class=\"string\">&quot;onChange&quot;</span></span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">onChange</span>(<span class=\"params\">pageNumber</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Page: &#x27;</span>, pageNumber);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>Input 输入框</strong></p>\n<p>通过鼠标或键盘输入内容，是最基础的表单域的包装。</p>\n<p>使用场景：</p>\n<ul>\n<li>需要用户输入表单域内容时。</li>\n<li>提供组合型输入框，带搜索的输入框，还可以进行大小选择。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;a-input placeholder=<span class=\"string\">&quot;Basic usage&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/01/21/%E9%A1%B5%E9%9D%A2%E8%A7%86%E9%A2%91%E7%94%BB%E4%B8%AD%E7%94%BB%E5%8A%9F%E8%83%BD/",
            "url": "https://github.com/chenxuwang51/blog/2021/01/21/%E9%A1%B5%E9%9D%A2%E8%A7%86%E9%A2%91%E7%94%BB%E4%B8%AD%E7%94%BB%E5%8A%9F%E8%83%BD/",
            "title": "页面视频画中画功能",
            "date_published": "2021-01-21T11:52:44.000Z",
            "content_html": "<!---->\n<span id=\"more\"></span>\n<p>前言：在 vue 中显示视频，默认无法失焦进行其他操作，这时可以使用画中画功能弥补缺陷。</p>\n<ul>\n<li>\n<p>视频标签及其中属性，注意 src 绑定的是一个变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;video</span><br><span class=\"line\">      id=<span class=\"string\">&quot;video&quot;</span></span><br><span class=\"line\">      width=<span class=\"string\">&quot;300&quot;</span></span><br><span class=\"line\">      height=<span class=\"string\">&quot;230&quot;</span></span><br><span class=\"line\">      :src=<span class=\"string\">&quot;src&quot;</span></span><br><span class=\"line\">      controls=<span class=\"string\">&quot;controls&quot;</span></span><br><span class=\"line\">      autoplay=<span class=\"string\">&quot;autoplay&quot;</span></span><br><span class=\"line\">      muted</span><br><span class=\"line\">    &gt;&lt;/video&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>调用按钮</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;van-button @click=<span class=\"string\">&quot;into&quot;</span>&gt;&#123;&#123; btn_msg &#125;&#125;画中画&lt;/van-button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      src: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      btn_msg: <span class=\"string\">&quot;进入&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//画中画功能，使用vue中的pictureInPictureElement组件</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">into</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//判断video标签是否已经是画中画模式，如果不是，就使用画中画组件</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (video !== <span class=\"built_in\">document</span>.pictureInPictureElement) &#123;</span><br><span class=\"line\">        video.requestPictureInPicture();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.btn_msg = <span class=\"string\">&quot;退出&quot;</span>;</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      <span class=\"comment\">//如果已经是则退出画中画模式</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.exitPictureInPicture();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.btn_msg = <span class=\"string\">&quot;进入&quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/01/20/%E5%88%86%E9%A1%B5/",
            "url": "https://github.com/chenxuwang51/blog/2021/01/20/%E5%88%86%E9%A1%B5/",
            "title": "分页",
            "date_published": "2021-01-20T10:58:42.000Z",
            "content_html": "<!---->\n<span id=\"more\"></span>\n<ul>\n<li>分页展示数据后端接口</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 课程列表页接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CourseList</span>(<span class=\"params\">APIView</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 获取前端传递的当前页</span></span><br><span class=\"line\">        page = <span class=\"built_in\">int</span>(request.GET.get(<span class=\"string\">&quot;page&quot;</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"comment\"># 每页展示的条数</span></span><br><span class=\"line\">        size = <span class=\"built_in\">int</span>(request.GET.get(<span class=\"string\">&quot;size&quot;</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"comment\"># 开始数据切片的位置</span></span><br><span class=\"line\">        data_start = (page - <span class=\"number\">1</span>) * size</span><br><span class=\"line\">        <span class=\"comment\"># 结束数据切片的位置</span></span><br><span class=\"line\">        data_end = page * size</span><br><span class=\"line\">        <span class=\"comment\"># 查询</span></span><br><span class=\"line\">        course_list = Course.objects.<span class=\"built_in\">all</span>()[data_start:data_end]</span><br><span class=\"line\">        <span class=\"comment\"># 数据总条数</span></span><br><span class=\"line\">        data_count = Course.objects.count()</span><br><span class=\"line\">        <span class=\"comment\"># 序列化查询集</span></span><br><span class=\"line\">        course_list_ser = CourseSer(course_list, many=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;total&quot;</span>: data_count, <span class=\"string\">&quot;data&quot;</span>: course_list_ser.data&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>前端使用 vant 分页组件，使用双向绑定将后端接口中需要的参数传过去</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;main-content-wrapper&quot;</span>&gt;</span><br><span class=\"line\">      &lt;van-grid :gutter=<span class=\"string\">&quot;10&quot;</span>&gt;</span><br><span class=\"line\">        &lt;van-grid-item</span><br><span class=\"line\">          v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;(item, index) in data_list&quot;</span></span><br><span class=\"line\">          :key=<span class=\"string\">&quot;index&quot;</span></span><br><span class=\"line\">          :icon=<span class=\"string\">&quot;&#x27;http://127.0.0.1:8000/static/upload/&#x27; + item.cover&quot;</span></span><br><span class=\"line\">          :text=<span class=\"string\">&quot;item.title&quot;</span></span><br><span class=\"line\">          :to=<span class=\"string\">&quot;&#x27;/coursedetail?cid=&#x27; + item.id&quot;</span></span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/van-grid&gt;</span><br><span class=\"line\">      &lt;!-- 分页控件 --&gt;</span><br><span class=\"line\">      &lt;van-pagination</span><br><span class=\"line\">        v-model=<span class=\"string\">&quot;page&quot;</span></span><br><span class=\"line\">        :total-items=<span class=\"string\">&quot;total&quot;</span></span><br><span class=\"line\">        :items-per-page=<span class=\"string\">&quot;size&quot;</span></span><br><span class=\"line\">        @change=<span class=\"string\">&quot;get_data&quot;</span></span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;van-cell-group&gt;</span><br><span class=\"line\">        &lt;van-field</span><br><span class=\"line\">          v-model=<span class=\"string\">&quot;digit&quot;</span></span><br><span class=\"line\">          type=<span class=\"string\">&quot;digit&quot;</span></span><br><span class=\"line\">          label=<span class=\"string\">&quot;跳转到&quot;</span></span><br><span class=\"line\">          placeholder=<span class=\"string\">&quot;请输入目标页码&quot;</span></span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;van-button type=<span class=\"string\">&quot;primary&quot;</span> @click=<span class=\"string\">&quot;get_digit&quot;</span>&gt;前往&lt;/van-button&gt;</span><br><span class=\"line\">      &lt;/van-cell-group&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      data_list: [],</span><br><span class=\"line\">      page: <span class=\"number\">1</span>,</span><br><span class=\"line\">      size: <span class=\"number\">3</span>,</span><br><span class=\"line\">      total: <span class=\"number\">0</span>,</span><br><span class=\"line\">      digit: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      photo: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      title: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.get_data();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get_data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.axios</span><br><span class=\"line\">        .get(<span class=\"string\">&quot;http://localhost:8000/courselist/&quot;</span>, &#123;</span><br><span class=\"line\">          params: &#123; <span class=\"attr\">page</span>: <span class=\"built_in\">this</span>.page,<span class=\"attr\">size</span>:<span class=\"built_in\">this</span>.size&#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(res.data);</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.data_list = res.data.data;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.total = res.data.total;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get_digit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.axios</span><br><span class=\"line\">        .get(<span class=\"string\">&quot;http://localhost:8000/courselist/&quot;</span>, &#123;</span><br><span class=\"line\">          params: &#123; <span class=\"attr\">page</span>: <span class=\"built_in\">this</span>.page,<span class=\"attr\">size</span>:<span class=\"built_in\">this</span>.size &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(res.data);</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.page = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.digit)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/01/19/%E9%80%92%E5%BD%92%E6%97%A0%E9%99%90%E8%AF%BE%E7%A8%8B%E5%88%86%E7%B1%BB/",
            "url": "https://github.com/chenxuwang51/blog/2021/01/19/%E9%80%92%E5%BD%92%E6%97%A0%E9%99%90%E8%AF%BE%E7%A8%8B%E5%88%86%E7%B1%BB/",
            "title": "递归无限课程分类",
            "date_published": "2021-01-19T12:44:00.000Z",
            "content_html": "<!-- -->\n<span id=\"more\"></span>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构造课程分类层级关系（树）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_tree</span>(<span class=\"params\">data</span>):</span></span><br><span class=\"line\">    lists = []</span><br><span class=\"line\">    tree = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        tree[item[<span class=\"string\">&quot;id&quot;</span>]] = item</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> i[<span class=\"string\">&quot;pid&quot;</span>]:</span><br><span class=\"line\">            lists.append(tree[i[<span class=\"string\">&quot;id&quot;</span>]])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            parent_id = i[<span class=\"string\">&quot;pid&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&quot;children&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> tree[parent_id]:</span><br><span class=\"line\">                tree[parent_id][<span class=\"string\">&quot;children&quot;</span>] = []</span><br><span class=\"line\">            tree[parent_id][<span class=\"string\">&quot;children&quot;</span>].append(tree[i[<span class=\"string\">&quot;id&quot;</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>将所有课程序列化，传给上面的树</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取课程分类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_cate</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 建立查询游标</span></span><br><span class=\"line\">    cursor = connection.cursor()</span><br><span class=\"line\">    <span class=\"comment\"># 执行sql</span></span><br><span class=\"line\">    cursor.execute(</span><br><span class=\"line\">        <span class=\"string\">&quot;SELECT * from cate&quot;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"comment\"># 获取结果查询集</span></span><br><span class=\"line\">    <span class=\"comment\"># res = cursor.fetchall()</span></span><br><span class=\"line\">    res = dictfetchall(cursor)</span><br><span class=\"line\">    res = get_tree(res)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(</span><br><span class=\"line\">        json.dumps(res, indent=<span class=\"number\">4</span>, ensure_ascii=<span class=\"literal\">False</span>), content_type=<span class=\"string\">&quot;application/json&quot;</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>前端使用组件传值方式构建页面（父组件向子组件传值）</p>\n</li>\n<li>\n<p>父组件中获取后端的课程数据通过使用子组件标签传给子组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;mycate :data=<span class=\"string\">&quot;data&quot;</span> /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> mycate <span class=\"keyword\">from</span> <span class=\"string\">&quot;./mycate.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123; mycate &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.get_data();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get_data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.axios.get(<span class=\"string\">&quot;http://127.0.0.1:8000/get_cate/&quot;</span>)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.data);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mytree = &#123; <span class=\"attr\">id</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;&quot;</span> &#125;;</span><br><span class=\"line\">        mytree[<span class=\"string\">&quot;children&quot;</span>] = res.data;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = mytree;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>子组件接受父组件传过来的数据，进行展示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;li&gt;</span><br><span class=\"line\">    &lt;div &gt;&#123;&#123; data.name &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">      &lt;ul v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;data.children &amp;&amp; data.children.length &gt; 0&quot;</span>&gt;</span><br><span class=\"line\">        &lt;mycate v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;child in data.children&quot;</span> :key=<span class=\"string\">&quot;child.id&quot;</span> :data=<span class=\"string\">&quot;child&quot;</span> /&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;mycate&quot;</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">&quot;data&quot;</span>],</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/01/18/1-18%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "https://github.com/chenxuwang51/blog/2021/01/18/1-18%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "位运算算法基础（二进制）",
            "date_published": "2021-01-18T07:08:10.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<ul>\n<li>\n<p>十进制：逢十进一，二进制：由 0 和 1 组成，逢二进一</p>\n</li>\n<li>\n<p>二进制（binary）在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTUlQUQlQTYvMTA3MDM3\">数学</span>和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTUlQUQlOTclRTclOTQlQjUlRTglQjclQUYvMTcwNQ==\">数字电路</span>中指以 2 为基数的记数系统，以 2 为基数代表系统是二进位制的。这一系统中，通常用两个不同的符号 0（代表零）和 1（代表一）来表示 [1] 。数字<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQjUlRTUlQUQlOTAlRTclOTQlQjUlRTglQjclQUYvMjU2NjU4Ng==\">电子电路</span>中，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklODAlQkIlRTglQkUlOTElRTklOTclQTgvNTE0MTE1NQ==\">逻辑门</span>的实现直接应用了二进制，因此现代的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQUUlQTElRTclQUUlOTclRTYlOUMlQkEvMTQwMzM4\">计算机</span>和依赖计算机的设备里都用到二进制。</p>\n</li>\n<li>\n<p>用栈实现输入十进制转换成二进制结果</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 栈</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.items = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 判断是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.items == []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 入栈</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self, item</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.items.append(item)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 出栈</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.items.pop()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">transform</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">    stack = Stack()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> num != <span class=\"number\">0</span>:</span><br><span class=\"line\">        res = num % <span class=\"number\">2</span></span><br><span class=\"line\">        num = <span class=\"built_in\">int</span>(num / <span class=\"number\">2</span>)</span><br><span class=\"line\">        stack.push(res)</span><br><span class=\"line\">    s = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> stack.is_empty():</span><br><span class=\"line\">        s += <span class=\"built_in\">str</span>(stack.pop())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"><span class=\"built_in\">print</span>(transform(<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入十进制数字&gt;&gt;&gt;&quot;</span>))))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>位运算权限控制</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user = <span class=\"number\">0b111</span>  <span class=\"comment\"># 111分别代表了3个节点（个人中心，修改密码，上传头像），说明该用户拥有权限表中的三种权限</span></span><br><span class=\"line\">permission = <span class=\"number\">0b001</span>  <span class=\"comment\"># 对应了上传头像权限</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写一个装饰器，判断用户是否拥有permission中的权限</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_decorator</span>(<span class=\"params\">func</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span>(<span class=\"params\">*args</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(args)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user &amp; args[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            func(*args)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;无权限&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传头像</span></span><br><span class=\"line\"><span class=\"meta\">@my_decorator</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload_img</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;上传头像过程&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(upload_img(permission))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/01/15/day07-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "https://github.com/chenxuwang51/blog/2021/01/15/day07-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "django文件上传",
            "date_published": "2021-01-15T13:27:49.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h1 id=\"文件上传图片\"><a class=\"markdownIt-Anchor\" href=\"#文件上传图片\">#</a> 文件上传（图片）</h1>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试文件上传</span></span><br><span class=\"line\"><span class=\"comment\"># 在元祖内，open前可以定义上传文件的默认文件名,例：&quot;wenjian.png&quot;,</span></span><br><span class=\"line\"><span class=\"comment\"># open后的参数为：目标文件地址，写入方式</span></span><br><span class=\"line\"><span class=\"comment\"># post方法中连接后端接口</span></span><br><span class=\"line\">files = &#123;<span class=\"string\">&quot;file&quot;</span>: (<span class=\"built_in\">open</span>(<span class=\"string\">&quot;G:/头像壁纸/微信传输/xiao.jpg&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>))&#125;</span><br><span class=\"line\">res = requests.post(<span class=\"string\">&quot;http://127.0.0.1:8000/upload/&quot;</span>, files=files)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res.text)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文件上传接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Uploader</span>(<span class=\"params\">View</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 接受参数</span></span><br><span class=\"line\">        file = request.FILES.get(<span class=\"string\">&quot;file&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 写文件，UPLOAD_ROOT为自定义的上传路径</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(UPLOAD_ROOT, <span class=\"string\">&quot;&quot;</span>, file.name), <span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> file.chunks():</span><br><span class=\"line\">                f.write(chunk)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(</span><br><span class=\"line\">            json.dumps(&#123;<span class=\"string\">&quot;filename&quot;</span>: file.name&#125;, ensure_ascii=<span class=\"literal\">False</span>), content_type=<span class=\"string\">&quot;application/json&quot;</span></span><br><span class=\"line\">        )</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/01/14/JWT/",
            "url": "https://github.com/chenxuwang51/blog/2021/01/14/JWT/",
            "title": "JWT",
            "date_published": "2021-01-14T11:08:46.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h1 id=\"jwt\"><a class=\"markdownIt-Anchor\" href=\"#jwt\">#</a> JWT</h1>\n<ul>\n<li>\n<p>使用 Django 中的 pyjwt 包</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入jwt模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> jwt</span><br><span class=\"line\"><span class=\"comment\"># 导入datetime模块，用于设置有效时间</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 载荷信息</span></span><br><span class=\"line\">play_load = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;exp&quot;</span>: <span class=\"built_in\">int</span>((datetime.datetime.now() + datetime.timedelta(minutes=<span class=\"number\">5</span>)).timestamp()),</span><br><span class=\"line\">    <span class=\"string\">&quot;data&quot;</span>: &#123;<span class=\"string\">&quot;uid&quot;</span>: <span class=\"number\">25</span>, <span class=\"string\">&quot;username&quot;</span>: <span class=\"string\">&quot;用户甲&quot;</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编码，play_load为载荷信息,key为解密的密钥，可自定义，algorithm为算法</span></span><br><span class=\"line\">encode_jwt = jwt.encode(play_load, key=<span class=\"string\">&quot;123&quot;</span>, algorithm=<span class=\"string\">&quot;HS256&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 打印查看生成的token及其数据类型</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(encode_jwt)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(encode_jwt))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强转，可以用decode方法，或者使用str强转</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(encode_jwt.decode()))</span><br><span class=\"line\">encode_str_jwt = <span class=\"built_in\">str</span>(encode_jwt, <span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(encode_str_jwt)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分为三部分：第一个.前是头部信息， 第一个.后和第二个.前的是载荷信息， 第二个.后是密钥信息</span></span><br><span class=\"line\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOjI1LCJ1c2VybmFtZSI6Ilx1NzUyOFx1NjIzN1x1NzUzMiJ9.vgEDgcok7xFqzlqijlCbM9nqd2sSFnL-iO6tEg0un6I</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解密</span></span><br><span class=\"line\">decode_jwt = jwt.decode(</span><br><span class=\"line\">    encode_str_jwt,</span><br><span class=\"line\">    key=<span class=\"string\">&quot;123&quot;</span>, algorithms=<span class=\"string\">&quot;HS256&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(decode_jwt)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(decode_jwt[<span class=\"string\">&quot;data&quot;</span>][<span class=\"string\">&quot;username&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解密，这里将play_load换上面生成的JWT，因为会设置有效时间，如果任然写play_load的话，会直接生成新的jwt，无法检验有效性</span></span><br><span class=\"line\">decode_jwt = jwt.decode(</span><br><span class=\"line\">  <span class=\"string\">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MTA1OTAzNTEsImRhdGEiOnsidWlkIjoyNSwidXNlcm5hbWUiOiJcdTc1MjhcdTYyMzdcdTc1MzIifX0.OfHNnRxAZqki4OBgVhJAnh9jvGPOb5JAvirrOCTzmxI&quot;</span>,</span><br><span class=\"line\">    key=<span class=\"string\">&quot;123&quot;</span>, algorithms=<span class=\"string\">&quot;HS256&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(decode_jwt)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/01/13/sms-code/",
            "url": "https://github.com/chenxuwang51/blog/2021/01/13/sms-code/",
            "title": "图片验证码",
            "date_published": "2021-01-13T12:15:53.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h1 id=\"img_code\"><a class=\"markdownIt-Anchor\" href=\"#img_code\">#</a> img_code</h1>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义验证码类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyImgCode</span>(<span class=\"params\">View</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 内置类方法，定义随机颜色</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_random_color</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        R = random.randrange(<span class=\"number\">255</span>)</span><br><span class=\"line\">        G = random.randrange(<span class=\"number\">255</span>)</span><br><span class=\"line\">        B = random.randrange(<span class=\"number\">255</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (R, G, B)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 定义画布,赋值宽，高</span></span><br><span class=\"line\">        img_size = (<span class=\"number\">120</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 定义图像对象</span></span><br><span class=\"line\">        image = Image.new(<span class=\"string\">&quot;RGB&quot;</span>, img_size, <span class=\"string\">&quot;white&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 定义画笔</span></span><br><span class=\"line\">        draw = ImageDraw.Draw(image, <span class=\"string\">&quot;RGB&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 定义字符串</span></span><br><span class=\"line\">        source = <span class=\"string\">&quot;0123456789abcdefghijklmnobqrstuvwxyz&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 定义容器</span></span><br><span class=\"line\">        code_str = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">            <span class=\"comment\"># 获取字符颜色</span></span><br><span class=\"line\">            text_color = self.get_random_color()</span><br><span class=\"line\">            <span class=\"comment\"># 获取随机字符</span></span><br><span class=\"line\">            tmp_num = random.randrange(<span class=\"built_in\">len</span>(source))</span><br><span class=\"line\">            random_str = source[tmp_num]</span><br><span class=\"line\">            <span class=\"comment\"># 将随机字符串添加到容器中</span></span><br><span class=\"line\">            code_str += random_str</span><br><span class=\"line\">            <span class=\"comment\"># 将字符画到画布上，坐标，字符串，文本颜色</span></span><br><span class=\"line\">            draw.text((<span class=\"number\">10</span> + <span class=\"number\">30</span> * i, <span class=\"number\">20</span>), random_str, text_color)</span><br><span class=\"line\">        <span class=\"comment\"># 使用io获取一个缓存区</span></span><br><span class=\"line\">        buf = io.BytesIO()</span><br><span class=\"line\">        <span class=\"comment\"># 将图片保存到缓存区</span></span><br><span class=\"line\">        image.save(buf, <span class=\"string\">&quot;png&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 保存验证码</span></span><br><span class=\"line\">        request.session[<span class=\"string\">&quot;code&quot;</span>] = code_str</span><br><span class=\"line\">        <span class=\"comment\"># 返回响应</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(buf.getvalue(), <span class=\"string\">&quot;image/png&quot;</span>)</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/01/13/selenium/",
            "url": "https://github.com/chenxuwang51/blog/2021/01/13/selenium/",
            "title": "selenium",
            "date_published": "2021-01-13T03:04:28.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h1 id=\"自动测试脚本\"><a class=\"markdownIt-Anchor\" href=\"#自动测试脚本\">#</a> 自动测试脚本</h1>\n<ul>\n<li>\n<p>Django 下载 selenium  3.141.0 依赖包</p>\n</li>\n<li>\n<p>查看当前谷歌浏览器版本</p>\n</li>\n</ul>\n<img data-src=\"F:\\学习\\重修七月\\截图\\查看谷歌版本.png\" style=\"zoom: 50%;\" />\n<ul>\n<li>下载对应谷歌版本号的 selenium 驱动：       <span class=\"exturl\" data-url=\"aHR0cDovL25wbS50YW9iYW8ub3JnL21pcnJvcnMvY2hyb21lZHJpdmVyLw==\">http://npm.taobao.org/mirrors/chromedriver/</span>       解压后方在谷歌浏览器应用目录下</li>\n</ul>\n<h3 id=\"完整代码\"><a class=\"markdownIt-Anchor\" href=\"#完整代码\">#</a> 完整代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver  <span class=\"comment\"># 导入网页驱动</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver <span class=\"keyword\">import</span> ActionChains  <span class=\"comment\"># 导入动作链</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成注册浏览器对象（注意window中文件路径斜杠附为\\，转译的意识，要换成/正斜杠）</span></span><br><span class=\"line\">register_browser = webdriver.Chrome(<span class=\"string\">&quot;C:/Program Files (x86)/Google/Chrome/Application/chromedriver.exe&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 打开注册页面</span></span><br><span class=\"line\">register_browser.get(<span class=\"string\">&quot;http://localhost:8080/myregister&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 元素选择</span></span><br><span class=\"line\">register_browser.find_elements_by_tag_name(<span class=\"string\">&quot;input&quot;</span>)[<span class=\"number\">1</span>].send_keys(<span class=\"string\">&quot;用户乙&quot;</span>)</span><br><span class=\"line\">register_browser.find_elements_by_tag_name(<span class=\"string\">&quot;input&quot;</span>)[<span class=\"number\">2</span>].send_keys(<span class=\"string\">&quot;222&quot;</span>)</span><br><span class=\"line\">register_browser.find_elements_by_tag_name(<span class=\"string\">&quot;input&quot;</span>)[<span class=\"number\">3</span>].send_keys(<span class=\"string\">&quot;222&quot;</span>)</span><br><span class=\"line\">register_browser.find_elements_by_tag_name(<span class=\"string\">&quot;input&quot;</span>)[<span class=\"number\">4</span>].send_keys(<span class=\"string\">&quot;17623235186&quot;</span>)</span><br><span class=\"line\">register_browser.find_elements_by_tag_name(<span class=\"string\">&quot;input&quot;</span>)[<span class=\"number\">5</span>].send_keys(<span class=\"string\">&quot;yhy@163.com&quot;</span>)</span><br><span class=\"line\">register_browser.find_elements_by_tag_name(<span class=\"string\">&quot;input&quot;</span>)[<span class=\"number\">6</span>].send_keys(<span class=\"string\">&quot;女&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 点击注册</span></span><br><span class=\"line\">register_browser.find_element_by_class_name(<span class=\"string\">&quot;van-button--primary&quot;</span>).click()</span><br><span class=\"line\"></span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成登录浏览器对象</span></span><br><span class=\"line\">login_browser = webdriver.Chrome(<span class=\"string\">&quot;C:/Program Files (x86)/Google/Chrome/Application/chromedriver.exe&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 打开登录页面</span></span><br><span class=\"line\">login_browser.get(<span class=\"string\">&quot;http://localhost:8080/mylogin&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 元素选择</span></span><br><span class=\"line\">login_browser.find_elements_by_tag_name(<span class=\"string\">&quot;input&quot;</span>)[<span class=\"number\">1</span>].send_keys(<span class=\"string\">&quot;17623235186&quot;</span>)  <span class=\"comment\"># 找到用户名的input框</span></span><br><span class=\"line\">login_browser.find_elements_by_tag_name(<span class=\"string\">&quot;input&quot;</span>)[<span class=\"number\">2</span>].send_keys(<span class=\"string\">&quot;222&quot;</span>)  <span class=\"comment\"># 找到密码的input框</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拖拽动作</span></span><br><span class=\"line\">action = ActionChains(login_browser)</span><br><span class=\"line\"><span class=\"comment\"># 获取拖拽对象的标签</span></span><br><span class=\"line\">button = login_browser.find_element_by_class_name(<span class=\"string\">&quot;dv_handler&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 按住标签不松，拖动</span></span><br><span class=\"line\">action.click_and_hold(button).perform()</span><br><span class=\"line\">action.reset_actions()</span><br><span class=\"line\">action.move_by_offset(<span class=\"number\">280</span>, <span class=\"number\">0</span>).perform()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 点击登录</span></span><br><span class=\"line\">login_browser.find_element_by_class_name(<span class=\"string\">&quot;van-button--primary&quot;</span>).click()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/01/12/1-12/",
            "url": "https://github.com/chenxuwang51/blog/2021/01/12/1-12/",
            "title": "python功能测试接口及用户的多方式登录",
            "date_published": "2021-01-12T03:58:20.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h3 id=\"测试脚本\"><a class=\"markdownIt-Anchor\" href=\"#测试脚本\">#</a> 测试脚本</h3>\n<!--多用于测试接口-->\n<ul>\n<li>\n<p>新建.py 文件，并导入 requests 如下图：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">data = &#123;<span class=\"string\">&quot;username&quot;</span>: <span class=\"string\">&quot;11&quot;</span>, <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;11&quot;</span>&#125;</span><br><span class=\"line\">res = requests.post(<span class=\"string\">&quot;http://127.0.0.1:8000/register/&quot;</span>, data=data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(res.text)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"多方式登录\"><a class=\"markdownIt-Anchor\" href=\"#多方式登录\">#</a> 多方式登录</h3>\n<ul>\n<li>\n<p>用户可使用多种方式进行登录，后端接口中要判断用户输入的是哪一种方式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用户登录</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span>(<span class=\"params\">APIView</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        username = request.data.get(<span class=\"string\">&quot;username&quot;</span>, <span class=\"literal\">None</span>)  <span class=\"comment\"># 接受用户输入的用户名</span></span><br><span class=\"line\">        phone = request.data.get(<span class=\"string\">&quot;phone&quot;</span>, <span class=\"literal\">None</span>)  <span class=\"comment\"># 接受用户输入的手机号</span></span><br><span class=\"line\">        email = request.data.get(<span class=\"string\">&quot;email&quot;</span>, <span class=\"literal\">None</span>)  <span class=\"comment\"># 接受用户输入的邮箱</span></span><br><span class=\"line\">        password = request.data.get(<span class=\"string\">&quot;password&quot;</span>, <span class=\"literal\">None</span>)  <span class=\"comment\"># 接受用户输入的密码</span></span><br><span class=\"line\">        active = request.data.get(<span class=\"string\">&quot;active&quot;</span>, <span class=\"literal\">None</span>)  <span class=\"comment\"># 前端van-tabs中的方式，0为默认的用户名登录，1是手机号，2是邮箱</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(username, phone, email, password, active, <span class=\"string\">&#x27;-------------&#x27;</span>)  <span class=\"comment\"># 打印查看后端是否接受到数据</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">if</span> active == <span class=\"number\">1</span>:  <span class=\"comment\"># 判断用户选择的登录方式，如果方式值为1，则用户选择手机号登录</span></span><br><span class=\"line\">            user = User.objects.<span class=\"built_in\">filter</span>(phone=phone).first()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> active == <span class=\"number\">2</span>:  <span class=\"comment\"># 如果方式值为2，则用户选择邮箱登录</span></span><br><span class=\"line\">            user = User.objects.<span class=\"built_in\">filter</span>(email=email).first()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            user = User.objects.<span class=\"built_in\">filter</span>(username=username).first()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user <span class=\"keyword\">and</span> make_password(user.password, <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">1000</span>, <span class=\"number\">9999</span>))):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;登录成功&quot;</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"number\">200</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> User.objects.<span class=\"built_in\">filter</span>(username=username).first():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;用户不存在 请先注册&quot;</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"number\">404</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;用户名或密码错误&quot;</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"number\">400</span>&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://github.com/chenxuwang51/blog/2021/01/12/hello-world/",
            "url": "https://github.com/chenxuwang51/blog/2021/01/12/hello-world/",
            "title": "Hello World",
            "date_published": "2021-01-12T03:54:26.019Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<!--  -->\n<span id=\"more\"></span>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}